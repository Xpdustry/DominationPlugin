import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem


buildscript{
    ext{
        // Mindustry API version you want to use
        mindustryVersion = "v126.2"

        // Junit version for tests outside a server
        junitVersion = "5.7.2"

        // Plugin metadata extracted from plugin.json
        metadata = new JsonSlurper().parseText(file("$rootDir/plugin.json").text)

        // A string that points directly to your server.jar directory
        serverDirectoryPath = null

        // the file:// at the beginning is required if you use windows if you don't want github actions to scream at you
        if(System.getProperty("user.name") == "Finley"){
            serverDirectoryPath = "file://C:/Users/Finley/Documents/My Games/Mindustry/Server/mindustry-server-$mindustryVersion"
        }
    }

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    }
}


plugins{
    id "java"
    id "maven-publish"
}


group "fr.xpdustry"
version metadata.version


repositories{
    mavenCentral()
    maven{ url "https://www.jitpack.io" }
}

dependencies{
    // Mindustry
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    // Unit Testing
    testImplementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    testImplementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}


compileJava{
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = "UTF-8"
}

java{
    withSourcesJar()
}

jar{
    // The following line is required
    from configurations.runtimeClasspath.collect{
        it.isDirectory() ? it : zipTree(it)
    }

    from "plugin.json"
}


compileTestJava{
    options.encoding = "UTF-8"
}

test{
    useJUnitPlatform()
}


task moveJar{
    dependsOn jar

    doLast{
        if(serverDirectoryPath == null || serverDirectoryPath.isEmpty()){
            throw new GradleException("serverDirectoryPath is unset")
        }

        // Deletes all the jar files that begins with the base artifact name
        delete file("$serverDirectoryPath/config/mods").listFiles({
            it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) jar.archiveBaseName.get())
        } as FileFilter)

        copy{
            from jar.archiveFile.get()
            into file("$serverDirectoryPath/config/mods")
        }
    }
}

task runServer{
    doLast{
        if(serverDirectoryPath == null || serverDirectoryPath.isEmpty()){
            throw new GradleException("serverDirectoryPath is unset")
        }

        exec{
            OperatingSystem os = OperatingSystem.current()

            workingDir = file(serverDirectoryPath)

            // Open a mindustry server in a new terminal window
            if(os.isWindows()){
                commandLine = ["cmd", "/C", "start", "run_server.bat"]
            }else if(os.isLinux()){
                commandLine = ["sh", "-c", "./run_server.sh"]
            }else{
                throw new GradleException("Unsuported operation, please implement a case for your os")
            }
        }
    }
}

task deployJar{
    dependsOn moveJar
    dependsOn runServer
}

// Required if you want to use the Release GitHub action,
task getArtifactPath{
    doLast{
        println jar.archiveFile.get().toString()
    }
}


publishing{
    publications{
        maven(MavenPublication){
            from components.java

            pom{
                name = metadata.displayName
                artifactId = metadata.name
                description = metadata.description
                url =  "https://github.com/$metadata.repo"

                licenses{
                    license{
                        name = "MIT License as Publication"
                        url = "https://www.opensource.org/licenses/mit-license.php"
                    }
                }

                developers{
                    developer{
                        id = metadata.author
                    }
                }
            }
        }
    }
}
